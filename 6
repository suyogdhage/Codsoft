import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# Generate a sine wave as example time series data
time = np.arange(0, 100, 0.1)
series = np.sin(time)

# Prepare data
def create_dataset(series, window_size):
    X, y = [], []
    for i in range(len(series) - window_size):
        X.append(series[i:i + window_size])
        y.append(series[i + window_size])
    return np.array(X), np.array(y)

window_size = 20
X, y = create_dataset(series, window_size)
X = X.reshape((X.shape[0], X.shape[1], 1))  # [samples, timesteps, features]

# Train/test split
split = int(len(X) * 0.8)
X_train, y_train = X[:split], y[:split]
X_test, y_test = X[split:], y[split:]

# Build LSTM model
model = Sequential([
    LSTM(50, activation='tanh', input_shape=(window_size, 1)),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Forecast
preds = model.predict(X_test)

# Plot
plt.plot(range(len(y_test)), y_test, label='True')
plt.plot(range(len(preds)), preds, label='Predicted')
plt.legend()
plt.title("Time Series Forecasting with LSTM")
plt.show()
