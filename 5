import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, Dense
from sklearn.model_selection import train_test_split

# Sample dataset (texts + labels: 0=negative, 1=neutral, 2=positive)
texts = [
    "I loved this movie!", "It was okay, not great.", "Worst film I have ever seen.",
    "Amazing performance!", "Nothing special about it.", "Terrible and boring.",
    "I enjoyed the story.", "Mediocre acting.", "Horrible plot.", "Just fine."
]
labels = [2, 1, 0, 2, 1, 0, 2, 1, 0, 1]  # 3 classes

# Tokenize text
tokenizer = tf.keras.preprocessing.text.Tokenizer()
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)
word_index = tokenizer.word_index
X = pad_sequences(sequences, maxlen=10)
y = tf.keras.utils.to_categorical(labels, num_classes=3)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build RNN model
model = Sequential([
    Embedding(input_dim=len(word_index)+1, output_dim=16, input_length=10),
    SimpleRNN(32),
    Dense(3, activation='softmax')
])

# Compile
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train
model.fit(X_train, y_train, epochs=10, batch_size=2, validation_split=0.1)

# Evaluate
loss, acc = model.evaluate(X_test, y_test)
print(f"Test accuracy: {acc:.2f}")
